logging:
  version: 1
  disable_existing_loggers: false
  formatters:
    colored:
      (): colorlog.ColoredFormatter
      format: '%(log_color)s%(asctime)s;%(levelname)-8s;%(name)-16s;%(message)s'
      log_colors:
        DEBUG: cyan
        INFO: green
        WARNING: yellow
        ERROR: red
        CRITICAL: red
    simple:
      format: '%(name)-16s: %(levelname)-8s %(message)s'
    verbose:
      format: '%(asctime)s;%(name)-16s;%(levelname)-8s;%(message)s'
  handlers:
    console:
      class: logging.StreamHandler
      level: INFO
      formatter: colored
      stream: ext://sys.stdout
    filelog:
      backupCount: 9
      level: INFO
      encoding: utf-8
      filename: /tmp/camacq.log
      formatter: verbose
      class: logging.handlers.RotatingFileHandler
      maxBytes: 1048576
  loggers:
    '':
      level: DEBUG
      handlers:
        - console
        - filelog
plugins:
  gain:
    channels:
      - channel: green
        init_gain: [450, 495, 540, 585, 630, 675, 720, 765, 810, 855, 900]
      - channel: blue
        init_gain: [400, 435, 470, 505, 540, 575, 610]
      - channel: yellow
        init_gain: [550, 585, 620, 655, 690, 725, 760]
      - channel: red
        init_gain: [525, 560, 595, 630, 665, 700, 735]
    objective: end_63x  # objective to use for the experiment
    save_dir: path/to/save_dir

api:
  leica:
    host: localhost
    port: 8895
    imaging_dir: '/path/to/imaging_dir'

automations:
  - name: start
    trigger:
      - type: event
        id: camacq_start_event
    action:
      - type: sample
        id: set_plate
        data:
          plate_name: '00'
      - type: sample
        id: set_well
        data:
          well_x: 1
          well_y: 1
  - name: image_next_well
    trigger:
      - type: event
        id: well_event
    condition:
      type: AND
      conditions:
        - condition: "{{ not trigger.event.well.images }}"
    action:
      - type: command
        id: send
        data:
          command: >
            /cmd:deletelist
      - type: command
        id: send
        data:
          command: >
            /cmd:add /tar:camlist /exp:gain_job /ext:af /slide:0
            /wellx:{{ trigger.event.well.x }} /welly:{{ trigger.event.well.y }}
            /fieldx:1 /fieldy:1 /dxpos:0 /dypos:0
      - type: command
        id: send
        data:
          command: >
            /cmd:add /tar:camlist /exp:gain_job /ext:af /slide:0
            /wellx:{{ trigger.event.well.x }} /welly:{{ trigger.event.well.y }}
            /fieldx:2 /fieldy:2 /dxpos:0 /dypos:0
      # Turn off rename image and set_img_ok during gain job phase.
      - type: automations
        id: toggle
        data:
          name: rename_image
      - type: automations
        id: toggle
        data:
          name: set_img_ok
      - type: command
        id: start_imaging
      - type: command
        id: send
        data:
          command: >
            /cmd:startcamscan
  - name: analyze_gain
    trigger:
      - type: event
        id: image_event
        data:
          field_x: 2
          field_y: 2
          job_id: 2
    action:
      - type: command
        id: stop_scan
      - type: plugin
        id: calc_gain
        data:
          well_x: >
            {{ trigger.event.well_x }}
          well_y: >
            {{ trigger.event.well_y }}
          plate_name: >
            {{ trigger.event.plate_name }}
          save_path: >
            path/to/imaging_dir/gains/{{ trigger.event.plate_name }}/{{
            trigger.event.well_name }}/{{ trigger.event.well_name }}
  - name: set_exp_gain
    trigger:
      - type: event
        id: channel_event
    action:
      - type: command
        id: send
        data:
          command: >
            /cmd:adjust /tar:pmt
            /num:{% if trigger.event.channel_name == 'green' %}1
            {% elif trigger.event.channel_name == 'blue' %}1
            {% elif trigger.event.channel_name == 'yellow' %}2
            {% elif trigger.event.channel_name == 'red' %}2
            {% endif %}
            /exp:gain_job /prop:gain
            /value:{% if trigger.event.channel_name == 'green' %}
              {% if not trigger.event.channel.gain %}800
              {% else %}{{ [trigger.event.channel.gain, 800] | min }}
              {% endif %}
            {% elif trigger.event.channel_name == 'blue' %}
              {% if not trigger.event.channel.gain %}505
              {% else %}{{ [trigger.event.channel.gain, 610] | min }}
              {% endif %}
            {% elif trigger.event.channel_name == 'yellow' %}
              {% if not trigger.event.channel.gain %}655
              {% else %}{{ [trigger.event.channel.gain, 760] | min }}
              {% endif %}
            {% elif trigger.event.channel_name == 'red' %}
              {% if not trigger.event.channel.gain %}630
              {% else %}{{ [trigger.event.channel.gain + 25, 735] | min }}
              {% endif %}
            {% endif %}
  - name: add_exp_job
    trigger:
      - type: event
        id: channel_event
    condition:
      type: AND
      conditions:
        - condition: >
            {% if trigger.event.well.channels | length == 4 %}
              true
            {% else %}
              false
            {% endif %}
    action:
      - type: command
        id: send
        data:
          command: >
            /cmd:deletelist
      - type: command
        id: send
        data:
          # Add exp job for 2 x 3 fields.
          command: >
            {% for x_number in range(1, 3) %}
              {% for y_number in range(1, 4) %}
                /cmd:add /tar:camlist /exp:exp_job /ext:af /slide:0
                /wellx:{{ trigger.event.well.x }}
                /welly:{{ trigger.event.well.y }} /fieldx:{{ x_number }}
                /fieldy:{{ y_number }} /dxpos:0 /dypos:0
              {% endfor %}
            {% endfor %}
      # Turn on rename image and set_img_ok during experiment job phase.
      - type: automations
        id: toggle
        data:
          name: rename_image
      - type: automations
        id: toggle
        data:
          name: set_img_ok
      - type: command
        id: start_imaging
      - type: command
        id: send
        data:
          command: >
            /cmd:startcamscan
  - name: set_img_ok
    trigger:
      - type: event
        id: image_event
        data:
          job_id: 4
    condition:
      type: AND
      conditions:
        - condition: >
            {% if not sample.plates[trigger.event.plate_name].wells[
              (trigger.event.well_x, trigger.event.well_y)].fields[
              (trigger.event.field_x, trigger.event.field_y)].img_ok
              %}true{% endif %}
    action:
      - type: sample
        id: set_field
        data:
          well_x: "{{ trigger.event.well_x }}"
          well_y: "{{ trigger.event.well_y }}"
          field_x: "{{ trigger.event.field_x }}"
          field_y: "{{ trigger.event.field_y }}"
          img_ok: true
  - name: rename_image
    trigger:
      - type: event
        id: image_event
    action:
      - type: plugins.rename_image
        id: rename_image
        data:
          path: >
            {{ trigger.event.path }}
          first_job_id: 2
  - name: add_next_well
    trigger:
      - type: event
        id: well_event
        data:
          well_img_ok: true
    action:
      - type: command
        id: stop_scan
      - type: sample
        id: set_well
        data:
          # Add next sample well for wells in 1-96 if well is not done.
          well_x: >
            {% for x_number in range(1, 13) %}
              {% for y_number in range(1, 9) %}
                {% set well_ok = sample.plates[trigger.event.plate_name].wells[
                  (x_number, y_number)].img_ok %}
                {% if loop.previtem is defined %}
                  {% set prev_well_ok = sample.plates[
                    trigger.event.plate_name].wells[
                    (x_number, loop.previtem)].img_ok %}
                {% endif %}
                {% if not well_ok and loop.previtem is not defined or
                  not well_ok and loop.previtem is defined and prev_well_ok %}
                  x_number
                {% endif %}
              {% endfor %}
            {% endfor %}
          well_y: >
            {% for x_number in range(1, 13) %}
              {% for y_number in range(1, 9) %}
                {% set well_ok = sample.plates[trigger.event.plate_name].wells[
                  (x_number, y_number)].img_ok %}
                {% if loop.previtem is defined %}
                  {% set prev_well_ok = sample.plates[
                    trigger.event.plate_name].wells[
                    (x_number, loop.previtem)].img_ok %}
                {% endif %}
                {% if not well_ok and loop.previtem is not defined or
                  not well_ok and loop.previtem is defined and prev_well_ok %}
                  y_number
                {% endif %}
              {% endfor %}
            {% endfor %}
